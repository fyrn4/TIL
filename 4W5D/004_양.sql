---------- 1. 조회년월의 급여 현황 조회(부서명칭, 사원이름순 정렬) ----------
SELECT D.DEPT_NAME
     , E.EMP_NAME
     , S.SALARY
  FROM TA_SALARY S
     , TA_DEPT   D
     , TA_EMP    E
 WHERE S.DEPT_CODE = D.DEPT_CODE
   AND S.EMP_CODE  = E.EMP_CODE
   AND S.YYYYMM = '201802'
 ORDER BY D.DEPT_NAME, E.EMP_NAME
;


---------- 2. 조회년월의 급여 현황 및 부서별 합계 조회 (부서명칭, 사원이름순 정렬) ----------

/* GROUPING SETS 사용
 * GROUPING한 각 그룹을 UNION 한 결과 표시
 */
SELECT MAX(D.DEPT_NAME) AS DEPT_NAME
     , DECODE(GROUPING(E.EMP_CODE), 1, '힙계', MAX(E.EMP_NAME)) AS EMP_NAME
     , SUM(S.SALARY) AS SALARY
  FROM TA_SALARY S
     , TA_DEPT   D
     , TA_EMP    E
 WHERE S.DEPT_CODE = D.DEPT_CODE
   AND S.EMP_CODE  = E.EMP_CODE
   AND S.YYYYMM = '201802'
 GROUP BY GROUPING SETS ((D.DEPT_CODE, E.EMP_CODE),(D.DEPT_CODE))
 ORDER BY MAX(D.DEPT_NAME), GROUPING(E.EMP_CODE), MAX(E.EMP_NAME)
;

/* GROUPING SETS을 UNION 형식으로 표현 */
SELECT DEPT_NAME, EMP_NAME, SALARY
  FROM (
		SELECT MAX(D.DEPT_NAME) AS DEPT_NAME
		     , MAX(E.EMP_NAME) AS EMP_NAME
		     , SUM(S.SALARY) AS SALARY
		     , 0 AS UNION_SORT
		  FROM TA_SALARY S
		     , TA_DEPT   D
		     , TA_EMP    E
		 WHERE S.DEPT_CODE = D.DEPT_CODE
		   AND S.EMP_CODE  = E.EMP_CODE
		   AND S.YYYYMM = '201802'
		 GROUP BY D.DEPT_CODE, E.EMP_CODE
		 UNION
		SELECT MAX(D.DEPT_NAME) AS DEPT_NAME
		     ,'힙계' AS EMP_NAME
		     , SUM(S.SALARY) AS SALARY
		     , 1 AS UNION_SORT
		  FROM TA_SALARY S
		     , TA_DEPT   D
		     , TA_EMP    E
		 WHERE S.DEPT_CODE = D.DEPT_CODE
		   AND S.EMP_CODE  = E.EMP_CODE
		   AND S.YYYYMM = '201802'
		 GROUP BY D.DEPT_CODE
       )
 ORDER BY DEPT_NAME, UNION_SORT, EMP_NAME
;

/* ROLLUP 사용
 * ROLLUP에 사용된 인수의 계층구조로 집계 결과 생성
 * 부서에 대해서만 소계를 내므로 계층구조의 의미는 사실상 없음
 */
SELECT MAX(D.DEPT_NAME) AS DEPT_NAME
     , DECODE(GROUPING(E.EMP_CODE), 1, '힙계', MAX(E.EMP_NAME)) AS EMP_NAME
     , SUM(S.SALARY) AS SALARY
  FROM TA_SALARY S
     , TA_DEPT   D
     , TA_EMP    E
 WHERE S.DEPT_CODE = D.DEPT_CODE
   AND S.EMP_CODE  = E.EMP_CODE
   AND S.YYYYMM = '201802'
 GROUP BY D.DEPT_CODE, ROLLUP(E.EMP_CODE)
 ORDER BY MAX(D.DEPT_NAME), GROUPING(E.EMP_CODE), MAX(E.EMP_NAME)
;

/* CUBE 사용
 * CUBE에 사용된 모든 인수에 대하여 다차원 집계를 생성
 * 부서에 대해서만 소계를 내므로 다차원 집계의 의미는 없음.
 */
SELECT MAX(D.DEPT_NAME) AS DEPT_NAME
     , DECODE(GROUPING(E.EMP_CODE), 1, '힙계', MAX(E.EMP_NAME)) AS EMP_NAME
     , SUM(S.SALARY) AS SALARY
  FROM TA_SALARY S
     , TA_DEPT   D
     , TA_EMP    E
 WHERE S.DEPT_CODE = D.DEPT_CODE
   AND S.EMP_CODE  = E.EMP_CODE
   AND S.YYYYMM = '201802'
 GROUP BY D.DEPT_CODE, CUBE(E.EMP_CODE)
 ORDER BY MAX(D.DEPT_NAME), GROUPING(E.EMP_CODE), MAX(E.EMP_NAME)
;


---------- 3. 조회년도 기준 부서별 전월/당월/전년 동월 급여를 조회 ----------
SELECT MAX(DPT.DEPT_NAME) AS DEPT_NAME
     , COUNT(DECODE(DATA.YYYYMM, '201803', DATA.EMP_CODE)) AS COUNT_DEPT /* 조회 월 기준 부서 인원 */
     , SUM(DECODE(DATA.YYYYMM, TO_CHAR(ADD_MONTHS(TO_DATE('201803', 'YYYYMM'), -1), 'YYYYMM'), DATA.SALARY)) AS PRE_MONTH_SALARY /* 전월 급여 합계 */
     , SUM(DECODE(DATA.YYYYMM, '201803', DATA.SALARY)) AS SALARY                                                                 /* 당월 급여 합계 */
     , SUM(DECODE(DATA.YYYYMM, TO_CHAR(ADD_MONTHS(TO_DATE('201803', 'YYYYMM'), -12), 'YYYYMM'), DATA.SALARY)) AS PRE_YEAR_SALARY /* 전년 동월 급여 합계 */
  FROM TA_SALARY DATA, TA_DEPT DPT
 WHERE DPT.DEPT_CODE = DATA.DEPT_CODE (+) /* 데이터가 없는 경우에도 부서가 표시되도록 아웃조인 */
 GROUP BY DPT.DEPT_CODE
 ORDER BY MAX(DPT.DEPT_NAME)
;

